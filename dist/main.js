// Generated by CoffeeScript 2.3.1
(function() {
  /*
   * To compile, install coffeescript and run the following command:
   * coffee -o dist/ -cw src/
   */
  var Semantics;

  //! The Semantics class
  Semantics = class Semantics {
    constructor() {
      this.values = {};
      this.plurals = {};
      this.options = {
        escapeHTML: true
      };
      Semantics.prototype.add.apply(this, arguments);
    }

  };

  //! ========================================
  //! Helpers
  Semantics.deepVal = function(obj, path) {
    var folder, i, l, len;
    //! Given an object and path as a string (ex, "foo/bar/baz"),
    //! return that object's property. (ex, obj.foo.bar.baz)
    // Removes the beginning/ending slashes in the path
    path = path.replace(/(^\/)|(\/$)/, '');
    path = path.split('/');
    l = path.length;
    for (i = 0, len = path.length; i < len; i++) {
      folder = path[i];
      try {
        obj = obj[folder];
      } catch (error) {
        return void 0;
      }
    }
    return obj;
  };

  //! ========================================
  //! Prototype
  Semantics.prototype.get = function(path, ...args) {
    var translation;
    //! Returns the translation at `path`
    translation = Semantics.deepVal(this.values, path);
    if (typeof translation === "function") {
      return translation(...args);
    } else {
      return translation;
    }
  };

  Semantics.prototype.plural = function(quantity, key, ...args) {
    //! Add plural rules
    if (typeof this.plurals[key] === "function") {
      return this.plurals[key](quantity, ...args);
    } else if (typeof this.values[key] !== "undefined") {
      return this.plurals[key];
    } else {
      return null;
    }
  };

  Semantics.prototype.add = function(translations = {}) {
    var key, ref, ref1, val;
    ref = translations['values'];
    //! Add translations
    for (key in ref) {
      val = ref[key];
      this.values[key] = val;
    }
    ref1 = translations['plurals'];
    //! Add plural rules
    for (key in ref1) {
      val = ref1[key];
      this.plurals[key] = val;
    }
    return this;
  };

  Semantics.prototype.setOption = function(setting, value) {
    if (this.options[setting] != null) {
      return this.options[setting] = value;
    }
  };

  //! ========================================
  //! Export
  if (this === (typeof window !== "undefined" && window !== null)) {
    //! Probably browser
    window["Semantics"] = Semantics;
  } else {
    //! Probably node
    module.exports = Semantics;
  }

}).call(this);
