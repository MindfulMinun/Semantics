// Generated by CoffeeScript 2.3.1
(function() {
  // ========================================
  // Class Semantics
  var Semantics;

  Semantics = class Semantics extends Function {
    constructor(defaultLang, dictionaries) {
      var bound;
      //! `this` is the bound function
      //! Let this.me = bound, or `this.me = this`
      //! Workaround for `this` to be called properly
      super("return this.get.apply(this.me, arguments)");
      bound = this.bind(this);
      [bound.me, this.me, bound.translations] = [bound, bound, {}];
      bound.lang = (typeof defaultLang === "string" ? defaultLang : "en");
      Semantics.prototype.add.call(bound, dictionaries);
      Object.setPrototypeOf(bound, Semantics.prototype);
      return bound;
    }

    get(key, ...args) {
      var h, ref;
      key = String(key);
      h = (ref = this.translations[this.lang]) != null ? ref[key] : void 0;
      switch (false) {
        case !(h == null):
          throw Error(`Key “${key}” not found in language “${this.lang}”.`);
        case typeof h !== "function":
          return h(...args);
        default:
          return h;
      }
    }

    add(dictionaries) {
      this.translations = Object.assign(this.translations, dictionaries);
      return this;
    }

    setLanguage(lang) {
      this.lang = lang;
    }

  };

  //! ========================================
  //! Export
  if (this === (typeof window !== "undefined" && window !== null)) {
    //! Probably browser
    window["Semantics"] = Semantics;
  } else {
    //! Probably node
    module.exports = Semantics;
  }

}).call(this);
